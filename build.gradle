plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.ilta'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// spring boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// mysql
	runtimeOnly 'com.mysql:mysql-connector-j'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Actuator 의조성
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// Prometheus 의존성
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

// Spotless 설정 (코드 스타일 자동 정리 도구)
spotless {
	java {
		googleJavaFormat()           // 구글 자바 포맷 스타일 적용
		removeUnusedImports()        // 사용하지 않는 import 제거
		importOrder('java', 'javax', 'org.springframework', '', 'com.ilta')  // import 순서
		trimTrailingWhitespace()     // 줄 끝 공백 제거
		endWithNewline()             // 파일 끝에 빈 줄 추가
		indentWithSpaces(4)          // 공백 4칸 들여쓰기
	}
}

// Git Hook 자동 복사 Task (커밋 전에 자동 실행되는 스크립트)
tasks.register('copyGitHook', Copy) {
	from new File(rootProject.rootDir, 'scripts/pre-commit')
	into new File(rootProject.rootDir, '.git/hooks')
}

// Git Hook 권한 설정 Task (chmod +x)
if (System.getProperty("os.name").toLowerCase().contains("windows")) {
	// Windows 환경에서는 권한 변경이 필요 없으므로, 단순 메시지만 출력
	tasks.register('chmodGitHook') {
		doLast {
			println "Windows 환경이므로 'chmodGitHook' 태스크를 실행하지 않습니다."
		}
	}
} else {
	// Unix/Linux/macOS 환경에서는 Exec 태스크를 사용해서 chmod 실행
	tasks.register('chmodGitHook', Exec) {
		commandLine 'chmod', '+x', '.git/hooks/pre-commit'
		dependsOn tasks.named('copyGitHook')
	}
}

// Git Hook 전체 설정 Task
tasks.register('updateGitHooks') {
	dependsOn 'copyGitHook', 'chmodGitHook'
}

// 컴파일 시 Spotless + Git Hook 적용
tasks.named('compileJava') {
	dependsOn 'spotlessApply'
	dependsOn 'updateGitHooks'
}


tasks.named('test') {
	useJUnitPlatform()
}
