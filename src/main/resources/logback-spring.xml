<configuration>

    <!-- Spring Boot 확장 변환기 등록 -->
    <conversionRule conversionWord="clr"
                    converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />

    <!-- INFO 로그 저장 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- INFO 로그 파일 경로 -->
        <file>logs/info/info.log</file>

        <!-- 로그 롤링 정책: 날짜별로 로그 파일을 분리 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 파일 이름 패턴: info.2025-01-05.log 형식으로 저장 -->
            <fileNamePattern>logs/info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 최대 보관 일수: 7일 -->
            <maxHistory>7</maxHistory>
        </rollingPolicy>

        <!-- 로그 출력 형식 지정 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>

        <!-- INFO 수준 로그만 허용 (다른 수준 로그는 무시) -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- WARN 로그 저장 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- WARN 로그 파일 경로 -->
        <file>logs/warn/warn.log</file>

        <!-- 로그 롤링 정책: 날짜별로 로그 파일을 분리 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 파일 이름 패턴: warn.2025-01-05.log 형식으로 저장 -->
            <fileNamePattern>logs/warn.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 최대 보관 일수: 7일 -->
            <maxHistory>7</maxHistory>
        </rollingPolicy>

        <!-- 로그 출력 형식 지정 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>

        <!-- WARN 수준 로그만 허용 (다른 수준 로그는 무시) -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ERROR 로그 저장 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- ERROR 로그 파일 경로 -->
        <file>logs/error/error.log</file>

        <!-- 로그 롤링 정책: 날짜별로 로그 파일을 분리 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 파일 이름 패턴: error.2025-01-05.log 형식으로 저장 -->
            <fileNamePattern>logs/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 최대 보관 일수: 7일 -->
            <maxHistory>7</maxHistory>
        </rollingPolicy>

        <!-- 로그 출력 형식 지정 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>

        <!-- ERROR 수준 로그만 허용 (다른 수준 로그는 무시) -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%-5level){WARN=yellow, ERROR=red, INFO=cyan, DEBUG=blue, TRACE=green} %clr(${PID:- }){magenta} %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx
            </pattern>
        </encoder>
    </appender>

    <!-- 루트 로거 설정 -->
    <root level="INFO">
        <!-- 콘솔로 로그 출력 -->
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="INFO_FILE" /> <!-- INFO 로그 파일 저장 -->
        <appender-ref ref="WARN_FILE" /> <!-- WARN 로그 파일 저장 -->
        <appender-ref ref="ERROR_FILE" /> <!-- ERROR 로그 파일 저장 -->
    </root>
</configuration>